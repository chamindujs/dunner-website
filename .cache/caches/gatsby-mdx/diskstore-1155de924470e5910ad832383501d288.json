{"expireTime":9007200831652824000,"key":"gatsby-mdx-entire-payload-b0ae3deeaf66da9c8ff6f59b1c7613aa-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Dunner is a container based task runner tool built in Golang using Docker’s client library. A user\ncan define multiple tasks, each task with some sequential steps which run on separate\ncontainers. Salient features are as follows,","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":4,"column":45,"offset":233},"indent":[1,1]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":4,"column":45,"offset":233},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Easy to write YAML task file","position":{"start":{"line":6,"column":3,"offset":239},"end":{"line":6,"column":31,"offset":267},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":239},"end":{"line":6,"column":31,"offset":267},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":237},"end":{"line":6,"column":31,"offset":267},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A test run mode, viz., Dry run","position":{"start":{"line":7,"column":3,"offset":271},"end":{"line":7,"column":33,"offset":301},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":271},"end":{"line":7,"column":33,"offset":301},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":269},"end":{"line":7,"column":33,"offset":301},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Passing arguments through cli","position":{"start":{"line":8,"column":3,"offset":305},"end":{"line":8,"column":32,"offset":334},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":305},"end":{"line":8,"column":32,"offset":334},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":303},"end":{"line":8,"column":32,"offset":334},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Exporting environment variables from the host or .env file","position":{"start":{"line":9,"column":3,"offset":338},"end":{"line":9,"column":61,"offset":396},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":338},"end":{"line":9,"column":61,"offset":396},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":336},"end":{"line":9,"column":61,"offset":396},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Mounting external directories as bind volumes","position":{"start":{"line":10,"column":3,"offset":400},"end":{"line":10,"column":48,"offset":445},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":400},"end":{"line":10,"column":48,"offset":445},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":398},"end":{"line":10,"column":48,"offset":445},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Concurrent execution of tasks by choice","position":{"start":{"line":11,"column":3,"offset":449},"end":{"line":11,"column":42,"offset":488},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":449},"end":{"line":11,"column":42,"offset":488},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":447},"end":{"line":11,"column":42,"offset":488},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":237},"end":{"line":11,"column":42,"offset":488},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"... and many more to come.","position":{"start":{"line":13,"column":1,"offset":492},"end":{"line":13,"column":27,"offset":518},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":492},"end":{"line":13,"column":27,"offset":518},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Why Docker?","position":{"start":{"line":15,"column":4,"offset":525},"end":{"line":15,"column":15,"offset":536},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":522},"end":{"line":15,"column":15,"offset":536},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Docker has proven to be a great utility tool when talked about the DevOps existing in the\ncurrent trend of software development. It’s open source, easy-to-use, reliable and reduces\nsystem dependencies on a very large scale. The motivation in choosing Docker as the backbone\nof a task-runner is that no dependencies are being installed on the host directly, and no\nexecution process interacts with host at core-level. This increases system security such that\nwhatever be the process, it gets executed in the container itself. Therefore, if the process is\nmeant to harm the system, only that specific container will get affected, not the host.","position":{"start":{"line":16,"column":1,"offset":538},"end":{"line":22,"column":88,"offset":1185},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":16,"column":1,"offset":538},"end":{"line":22,"column":88,"offset":1185},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Dunner\"}","position":{"start":{"line":25,"column":1,"offset":1189},"end":{"line":25,"column":47,"offset":1235},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":25,"column":47,"offset":1235}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dunner\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Dunner is a container based task runner tool built in Golang using Docker\\u2019s client library. A user\\ncan define multiple tasks, each task with some sequential steps which run on separate\\ncontainers. Salient features are as follows,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy to write YAML task file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A test run mode, viz., Dry run\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Passing arguments through cli\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exporting environment variables from the host or .env file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mounting external directories as bind volumes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Concurrent execution of tasks by choice\")), mdx(\"p\", null, \"... and many more to come.\"), mdx(\"h2\", null, \"Why Docker?\"), mdx(\"p\", null, \"Docker has proven to be a great utility tool when talked about the DevOps existing in the\\ncurrent trend of software development. It\\u2019s open source, easy-to-use, reliable and reduces\\nsystem dependencies on a very large scale. The motivation in choosing Docker as the backbone\\nof a task-runner is that no dependencies are being installed on the host directly, and no\\nexecution process interacts with host at core-level. This increases system security such that\\nwhatever be the process, it gets executed in the container itself. Therefore, if the process is\\nmeant to harm the system, only that specific container will get affected, not the host.\"));\n}\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"Dunner\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Dunner is a container based task runner tool built in Golang using Docker’s client library. A user\ncan define multiple tasks, each task with some sequential steps which run on separate\ncontainers. Salient features are as follows,`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Easy to write YAML task file`}</li>\n      <li parentName=\"ul\">{`A test run mode, viz., Dry run`}</li>\n      <li parentName=\"ul\">{`Passing arguments through cli`}</li>\n      <li parentName=\"ul\">{`Exporting environment variables from the host or .env file`}</li>\n      <li parentName=\"ul\">{`Mounting external directories as bind volumes`}</li>\n      <li parentName=\"ul\">{`Concurrent execution of tasks by choice`}</li>\n    </ul>\n    <p>{`... and many more to come.`}</p>\n    <h2>{`Why Docker?`}</h2>\n    <p>{`Docker has proven to be a great utility tool when talked about the DevOps existing in the\ncurrent trend of software development. It’s open source, easy-to-use, reliable and reduces\nsystem dependencies on a very large scale. The motivation in choosing Docker as the backbone\nof a task-runner is that no dependencies are being installed on the host directly, and no\nexecution process interacts with host at core-level. This increases system security such that\nwhatever be the process, it gets executed in the container itself. Therefore, if the process is\nmeant to harm the system, only that specific container will get affected, not the host.`}</p>\n\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;"}}